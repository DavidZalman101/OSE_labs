From 8cafedf000e2a498db16792518c0adfe42afff4a Mon Sep 17 00:00:00 2001
From: DavidZalman101 <davidzalman.101@gmail.com>
Date: Thu, 26 Jun 2025 22:39:13 +0300
Subject: [PATCH 07/12] lab6 - Exercise 7.

---
 inc/lib.h      |  2 ++
 inc/syscall.h  |  1 +
 kern/e1000.c   |  5 ++---
 kern/e1000.h   |  2 +-
 kern/syscall.c | 20 ++++++++++++++++++++
 lib/syscall.c  |  6 ++++++
 6 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/inc/lib.h b/inc/lib.h
index 181a790..08b34c6 100644
--- a/inc/lib.h
+++ b/inc/lib.h
@@ -60,6 +60,7 @@ int	sys_page_unmap(envid_t env, void *pg);
 int	sys_ipc_try_send(envid_t to_env, uint32_t value, void *pg, int perm);
 int	sys_ipc_recv(void *rcv_pg);
 unsigned int sys_time_msec(void);
+int sys_net_try_send(void *buf, uint32_t buf_len);
 
 // This must be inlined.  Exercise for reader: why?
 static __inline envid_t __attribute__((always_inline))
@@ -140,6 +141,7 @@ int	pipeisclosed(int pipefd);
 // wait.c
 void	wait(envid_t env);
 
+
 /* File open modes */
 #define	O_RDONLY	0x0000		/* open for reading only */
 #define	O_WRONLY	0x0001		/* open for writing only */
diff --git a/inc/syscall.h b/inc/syscall.h
index 36f26de..11bc823 100644
--- a/inc/syscall.h
+++ b/inc/syscall.h
@@ -18,6 +18,7 @@ enum {
 	SYS_ipc_try_send,
 	SYS_ipc_recv,
 	SYS_time_msec,
+	SYS_net_send,
 	NSYSCALLS
 };
 
diff --git a/kern/e1000.c b/kern/e1000.c
index 86afe9f..175225d 100644
--- a/kern/e1000.c
+++ b/kern/e1000.c
@@ -84,10 +84,9 @@ transmit_init(void)
 	E1000_REG(E1000_TIPG) = (0xa) | (0x4 << 10) | (0x6 << 20);
 }
 
-static int
-transmit_packet(uint8_t *buf, uint32_t buf_len)
+int
+transmit_packet(void *buf, uint32_t buf_len)
 {
-	cprintf("entered transmit_packet\n");
 	if (!buf)
 		return -E1000_ERR_IVALID_ARG;
 
diff --git a/kern/e1000.h b/kern/e1000.h
index c21274c..65805f2 100644
--- a/kern/e1000.h
+++ b/kern/e1000.h
@@ -102,6 +102,6 @@ uint8_t tx_bufs[NTDX][TDX_BUF_SIZE];
 
 int e1000_attach(struct pci_func *);
 static void transmit_init(void);
-static int transmit_packet(uint8_t *buf, uint32_t buf_len);
+int transmit_packet(void *buf, uint32_t buf_len);
 
 #endif	// JOS_KERN_E1000_H
diff --git a/kern/syscall.c b/kern/syscall.c
index 22bf280..dababc5 100644
--- a/kern/syscall.c
+++ b/kern/syscall.c
@@ -12,6 +12,7 @@
 #include <kern/console.h>
 #include <kern/sched.h>
 #include <kern/time.h>
+#include <kern/e1000.h>
 
 // Print a string to the system console.
 // The string is exactly 'len' characters long.
@@ -560,6 +561,21 @@ sys_time_msec(void)
 	return time_msec();
 }
 
+/*
+	Transmit a packet with E1000.
+	return values:
+		-E1000_ERR_IVALID_ARG
+		-E1000_ERR_TX_PKT_TOO_BIG
+		-E1000_ERR_TX_QUEUE_FULL
+		0 (Success)
+*/
+static int
+sys_net_try_send(void *buf, uint32_t buf_len)
+{
+	user_mem_assert(curenv, buf, buf_len, PTE_U);
+	return transmit_packet((uint8_t*) buf, buf_len);
+}
+
 // Dispatches to the correct kernel function, passing the arguments.
 int32_t
 syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
@@ -632,6 +648,10 @@ syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 			r_val = sys_time_msec();
 			goto done;
 
+		case SYS_net_send:
+			r_val = sys_net_try_send((void*) a1, (uint32_t) a2);
+			goto done;
+
 		default:
 			r_val = -E_INVAL;
 	}
diff --git a/lib/syscall.c b/lib/syscall.c
index 8a199ce..85080fd 100644
--- a/lib/syscall.c
+++ b/lib/syscall.c
@@ -122,3 +122,9 @@ sys_time_msec(void)
 {
 	return (unsigned int) syscall(SYS_time_msec, 0, 0, 0, 0, 0, 0);
 }
+
+int
+sys_net_try_send(void *buf, uint32_t buf_len)
+{
+	return syscall(SYS_net_send, 0, (uint32_t)buf, (uint32_t)buf_len, 0, 0, 0);
+}
-- 
1.9.1

