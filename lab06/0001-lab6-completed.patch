From 7f73840239d121da9bf170494c631b1f1a22d0e7 Mon Sep 17 00:00:00 2001
From: DavidZalman101 <davidzalman.101@gmail.com>
Date: Tue, 24 Jun 2025 21:43:10 +0300
Subject: [PATCH] lab6 completed

---
 answers-lab6.txt |  33 ++++++++
 inc/env.h        |   4 +
 inc/lib.h        |   3 +
 inc/syscall.h    |   2 +
 inc/trap.h       |   1 +
 kern/e1000.c     | 237 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 kern/e1000.h     | 214 +++++++++++++++++++++++++++++++++++++++++++++++++
 kern/pci.c       |   1 +
 kern/syscall.c   |  63 ++++++++++++++-
 kern/trap.c      |  11 +++
 kern/trap.h      |   1 +
 kern/trapentry.S |   3 +
 lib/syscall.c    |  12 +++
 net/input.c      |  69 ++++++++++++++++
 net/output.c     |  24 +++++-
 user/httpd.c     |  23 +++++-
 16 files changed, 696 insertions(+), 5 deletions(-)
 create mode 100644 answers-lab6.txt

diff --git a/answers-lab6.txt b/answers-lab6.txt
new file mode 100644
index 0000000..746f9f4
--- /dev/null
+++ b/answers-lab6.txt
@@ -0,0 +1,33 @@
+Question 1
+	How did you structure your transmit implementation?
+	In particular, what do you do if the transmit ring is full?
+
+Answer
+	The E1000 driver does not busy-wait on the queue, when the tx_desc's full it returns with
+	an appropriate error value. With that informantion, the output_helper_env can be cpu mindful
+	by yeilding the cpu, while hoping that the next time it will awake, the queue won't be full
+	and a succesfull re-transmit will be completed.
+
+Question 2
+	How did you structure you receive implementation? In particular, what do you do if
+	receive queue is empty and a user environment requests the next incoming packet?
+
+Answer	
+	The Transmit and Recive process is intrrupt driven.
+	When the Recive queue is empty or the Transmit Queeu is full, we place the env
+	to sleep (ENV_NET_WAIT). Once we get an interrupt from the E1000 hardware, we
+	wake the appropriate env. To go and try once more to read/write.
+
+Question 3
+	What does the web page served by JOS's web server say?
+
+Answer
+			The file came from JOS.
+				Cheesy web page!
+
+Question 4
+	How long approximately did it take you to do this lab?
+
+Answer
+	Embarrassedly long...
+	I had 2 f---ing heisenbugs that took me a stupid amount of time to figure out (week+)...
diff --git a/inc/env.h b/inc/env.h
index 044c68a..577d1c9 100644
--- a/inc/env.h
+++ b/inc/env.h
@@ -35,6 +35,7 @@ enum {
 	ENV_DYING,
 	ENV_RUNNABLE,
 	ENV_RUNNING,
+	ENV_NET_WAIT,
 	ENV_NOT_RUNNABLE
 };
 
@@ -68,6 +69,9 @@ struct Env {
 	envid_t env_ipc_from;		// envid of the sender
 	int env_ipc_perm;		// Perm of page mapping received
 
+	// lab 6
+	bool e1000_try_to_read_again;
+
 #ifdef IPC_SEND_NO_LOOP
 	// the following fields are essintial to allow the reciever to
 	// collect the data waited for him, if available.
diff --git a/inc/lib.h b/inc/lib.h
index 181a790..55ee29f 100644
--- a/inc/lib.h
+++ b/inc/lib.h
@@ -60,6 +60,8 @@ int	sys_page_unmap(envid_t env, void *pg);
 int	sys_ipc_try_send(envid_t to_env, uint32_t value, void *pg, int perm);
 int	sys_ipc_recv(void *rcv_pg);
 unsigned int sys_time_msec(void);
+int sys_net_try_send(void *buf, uint32_t buf_len);
+int sys_net_try_recv(void *buf, uint32_t buf_len);
 
 // This must be inlined.  Exercise for reader: why?
 static __inline envid_t __attribute__((always_inline))
@@ -140,6 +142,7 @@ int	pipeisclosed(int pipefd);
 // wait.c
 void	wait(envid_t env);
 
+
 /* File open modes */
 #define	O_RDONLY	0x0000		/* open for reading only */
 #define	O_WRONLY	0x0001		/* open for writing only */
diff --git a/inc/syscall.h b/inc/syscall.h
index 36f26de..7b3d12e 100644
--- a/inc/syscall.h
+++ b/inc/syscall.h
@@ -18,6 +18,8 @@ enum {
 	SYS_ipc_try_send,
 	SYS_ipc_recv,
 	SYS_time_msec,
+	SYS_net_send,
+	SYS_net_try_recv,
 	NSYSCALLS
 };
 
diff --git a/inc/trap.h b/inc/trap.h
index b36aae3..8d5fffd 100644
--- a/inc/trap.h
+++ b/inc/trap.h
@@ -36,6 +36,7 @@
 #define IRQ_KBD          1
 #define IRQ_SERIAL       4
 #define IRQ_SPURIOUS     7
+#define IRQ_E1000       11
 #define IRQ_IDE         14
 #define IRQ_ERROR       19
 
diff --git a/kern/e1000.c b/kern/e1000.c
index 7570e75..9ca3fbb 100644
--- a/kern/e1000.c
+++ b/kern/e1000.c
@@ -1,3 +1,240 @@
 #include <kern/e1000.h>
 
 // LAB 6: Your driver code here
+
+int e1000_waiting_counter = 0;
+
+/*
+	Gets called automatically when JOS finds the E1000 dev during boot.
+	Enables the device - allocate memory space/IO ports and interrupt lines.
+	Sets up driver initialization - prepares the device for use by JOS.
+*/
+int
+e1000_attach(struct pci_func *pcif)
+{
+	physaddr_t bar0_base;
+	uint32_t bar0_size;
+	// pci_func_enable negotiates an MMIO region with the E1000 and stores its base
+	// and size in BAR 0. This is a range of physical memory addresses assigned to
+	// this device.
+	pci_func_enable(pcif);
+
+	// Create a virtual memory mapping for the E1000 BAR 0.
+	bar0_base = pcif->reg_base[0];
+	bar0_size = pcif->reg_size[0];
+	e1000_base = mmio_map_region(bar0_base, bar0_size);
+
+	// test - print the device status register - expecting 0x80080783
+	cprintf("E1000 status = [%x]\n", E1000_REG(E1000_STATUS));
+
+	transmit_init();
+	receive_init();
+	return 0;
+}
+
+/*
+	Transmit Initialization - 14.5
+	- Allocate memory for the transmit descriptor list.
+	- Program the transmit descriptor base address registers.
+	- Set the transmit descriptor length register.
+	- Initialize the transmit descriptor head and tail.
+	- Initialize the transmit control register.
+	- Initialize the transmit inter packet gap register.
+*/
+static void
+transmit_init(void)
+{
+	uint32_t i;
+
+	// mem init
+	memset(tx_queue, 0, sizeof(tx_queue));
+	memset(tx_bufs, 0, sizeof(tx_bufs));
+	assert((PADDR((void*) tx_queue) & 0xF) == 0x0); // 16-bytes aligned
+
+	for (i = 0; i < NTDX; i++) {
+		memset(tx_bufs[i], 0, TDX_BUF_SIZE);
+		tx_queue[i].buf_addr = PADDR(tx_bufs[i]);
+		tx_queue[i].cmd |= E1000_TX_CMD_RS;
+		tx_queue[i].status |= E1000_TX_STAT_DD;
+	}
+
+	// base init
+	E1000_REG(E1000_TDBAL) = PADDR((void*)tx_queue);
+	E1000_REG(E1000_TDBAH) = 0;
+
+	// len init
+	assert((sizeof(tx_queue) & 0x7F) == 0); // 128-byte aligned
+	E1000_REG(E1000_TDLEN) = sizeof(tx_queue);
+
+	// head & tail init
+	E1000_REG(E1000_TDH) = 0x0;
+	E1000_REG(E1000_TDT) = 0x0;
+
+	// control init
+	E1000_REG(E1000_TCTL) &= ~(E1000_TCTL_CT | E1000_TCTL_COLD);
+	E1000_REG(E1000_TCTL) |= (E1000_TCTL_EN)    |
+							 (E1000_TCTL_PSP)   |
+							 (0x10 << E1000_TCTL_CT_SHIFT) |
+							 (0x40 << E1000_TCTL_COLD_SHIFT);
+
+	// Inter packet gap init
+	E1000_REG(E1000_TIPG) &= ~(E1000_TIPG_IPGT_MASK | E1000_TIPG_IPGR1_MASK |
+							   E1000_TIPG_IPGR2_MASK);
+	E1000_REG(E1000_TIPG) = (0xa) | (0x4 << 10) | (0x6 << 20);
+	asm volatile("mfence" ::: "memory");
+}
+
+int
+transmit_packet(void *buf, uint32_t buf_len)
+{
+	if (buf_len > TDX_BUF_SIZE)
+		return -E1000_ERR_TX_PKT_TOO_BIG;
+
+	int tail_idx = E1000_REG(E1000_TDT);	
+
+	if (!(tx_queue[tail_idx].status & E1000_TX_STAT_DD))
+		return -E1000_ERR_TX_QUEUE_FULL;
+
+	assert(tx_queue[tail_idx].cmd & E1000_TX_CMD_RS);
+
+	// prepare to insert packet to tx queue
+	memcpy(tx_bufs[tail_idx], buf, buf_len);
+	tx_queue[tail_idx].len = buf_len;
+	tx_queue[tail_idx].cmd = E1000_TX_CMD_EOP | E1000_TX_CMD_RS;
+	tx_queue[tail_idx].status &= ~E1000_TX_STAT_DD;
+
+	// insert - make sure all memory was written before and after
+	asm volatile("mfence" ::: "memory");
+	E1000_REG(E1000_TDT) = (tail_idx + 1) % NTDX;
+	asm volatile("mfence" ::: "memory");
+	return 0;
+}
+
+/*
+	Receive Initialization - 14.4
+	- Program the Receive Address Registers.
+	- Init the Multicast Table array.
+	- Allocate memory for receive descriptor list.
+	- Program the Receive Base Adress registers.
+	- Set the Receive Descriptor Length.
+	- Init the Receive Descriptor Head and Tail.
+	- Program the Receive Control Register.
+*/
+static void
+receive_init(void)
+{
+	int i;
+	// init Receive regs
+	E1000_REG(E1000_RAL) = DEFAULT_MAC_ADDRESS_LOW_ORDER;
+	E1000_REG(E1000_RAH) = DEFAULT_MAC_ADDRESS_HIGH_ORDER;
+	E1000_REG(E1000_RAH) |= E1000_RAH_AV;
+
+	// init MTA
+	uint32_t mta_addr = E1000_MTA;
+	for (i = 0; i < 128; i++, mta_addr += 4)
+		E1000_REG(mta_addr) = 0;
+	
+	// base init
+	assert(PADDR(rx_queue) % 16 == 0);
+	E1000_REG(E1000_RDBAL) = PADDR(rx_queue);
+	E1000_REG(E1000_RDBAH) = 0;
+
+	// len init
+	assert(sizeof(rx_queue) % 128 == 0);
+	E1000_REG(E1000_RDLEN) = sizeof(rx_queue);
+
+	// head & tail init
+	E1000_REG(E1000_RDH) = 0;
+	E1000_REG(E1000_RDT) = NRDX - 1;
+
+	// control init
+	E1000_REG(E1000_RCTL) &= ~E1000_RCTL_LPE; // Disable Long packets
+	E1000_REG(E1000_RCTL) &= ~E1000_RCTL_LBM; // loopback mode - normal operation
+
+	// RDMT
+	E1000_REG(E1000_RCTL) &= ~E1000_RCTL_RDMTS; // clear
+	E1000_REG(E1000_RCTL) |= E1000_RCTL_RDMTS_QUAT; // set
+
+	// MO
+	E1000_REG(E1000_RCTL) &= ~(E1000_RCTL_MO_1 | E1000_RCTL_MO_2 | E1000_RCTL_MO_3); // clear
+	E1000_REG(E1000_RCTL) |= E1000_RCTL_MO_0; // set
+
+	// BAM
+	E1000_REG(E1000_RCTL) |= E1000_RCTL_BAM;
+
+	// Buf Size/Extension
+	E1000_REG(E1000_RCTL) &= ~E1000_RCTL_BSEX; // clear
+	E1000_REG(E1000_RCTL) &= ~(E1000_RCTL_SZ_1024 | E1000_RCTL_SZ_512 | E1000_RCTL_SZ_256); // clear
+	// 00b -> 2048b // set
+
+	// Strip CRC
+	E1000_REG(E1000_RCTL) |= E1000_RCTL_SECRC;
+
+	// mem init
+	memset(rx_queue, 0, sizeof(rx_queue));
+	for (i = 0; i < NRDX; i++) {
+		memset(rx_bufs[i], 0, RDX_BUF_SIZE);
+		rx_queue[i].buf_addr = PADDR(rx_bufs[i]);
+		rx_queue[i].status = 0;
+	}
+
+	// Enable
+	asm volatile("mfence" ::: "memory");
+	E1000_REG(E1000_RCTL) |= E1000_RCTL_EN;
+	asm volatile("mfence" ::: "memory");
+
+	// Intr
+	E1000_REG(E1000_IMC) = 0xffffffff;  // Clear all interrupts first
+	E1000_REG(E1000_IMS) = E1000_IMS_RXDMT0 | E1000_IMS_RXT0 | E1000_ICR_TXQE;
+	irq_setmask_8259A(irq_mask_8259A & ~(1<<11));
+}
+
+int
+receive_packet(void *buf, uint32_t buf_len)
+{
+	static int next_idx = 0;
+	int to_copy = 0;
+	uint32_t rec_buf_len = rx_queue[next_idx].len;
+
+	// check if queue is empty
+	if (!(rx_queue[next_idx].status & E1000_RXD_STAT_DD))
+		return -E1000_ERR_RX_QUEUE_EMPTY;
+
+	// check if the packet has legal len
+	if (rec_buf_len > RDX_BUF_SIZE)
+		return -E1000_ERR_RX_PKT_TOO_BIG;
+
+	// copy to buffer
+	to_copy = buf_len < rec_buf_len ? buf_len : rec_buf_len;
+	memcpy(buf, rx_bufs[next_idx], to_copy);
+	asm volatile("mfence" ::: "memory");
+
+	// clear the packet and move the tail
+	rx_queue[next_idx].status &= ~E1000_RXD_STAT_DD;
+	asm volatile("mfence" ::: "memory");
+	E1000_REG(E1000_RDT) = next_idx;
+	asm volatile("mfence" ::: "memory");
+	next_idx = (next_idx + 1) % NRDX;
+	return to_copy;
+}
+
+void
+e1000_interrupt(void)
+{
+	int i;
+	uint32_t icr = E1000_REG(E1000_ICR);
+	//(void)icr;
+	asm volatile("mfence" ::: "memory");
+
+	if (!(icr & (E1000_ICR_RXT0 | E1000_ICR_RXDMT0)))
+		return;
+
+	// wake up all the envs whome are waiting on net
+	for (i = 0; i < NENV; i++)
+		if (envs[i].env_status == ENV_NET_WAIT) {
+			//cprintf("~~~> e1000_intr: waking up %d\n", envs[i].env_id);
+			envs[i].env_status = ENV_RUNNABLE;
+		}
+	
+	return;
+}
diff --git a/kern/e1000.h b/kern/e1000.h
index e563ac4..ea16f09 100644
--- a/kern/e1000.h
+++ b/kern/e1000.h
@@ -1,4 +1,218 @@
 #ifndef JOS_KERN_E1000_H
 #define JOS_KERN_E1000_H
 
+// Includes
+#include <kern/pci.h>
+#include <kern/pmap.h>
+#include <kern/picirq.h>
+#include <kern/env.h>
+#include <inc/string.h>
+
+// Defines
+#define E1000_VEN_ID 0x8086
+#define E1000_DEV_ID_82540EM 0x100E
+#define DEFAULT_MAC_ADDRESS_LOW_ORDER  0x12005452
+#define DEFAULT_MAC_ADDRESS_HIGH_ORDER 0x00005634
+
+/*	Register Set.
+
+	Registers are defined to be 32 bits and should be accessed as 32 bit values.
+	There register are physically located on the NIC, but are mapped into the host
+	memory address sapce.
+
+	RW - register is both readable and writable.
+	RO - register is read only.
+	WO - register is write only.
+	R/clr - register is read only and is cleared when read.
+	A - register array.
+*/
+#define E1000_REG(offset) (*(volatile uint32_t*)(e1000_base + offset)) /* Read Register at offset */
+
+#define E1000_CTRL   0x00000 /* Device Control - RW       */
+#define E1000_STATUS 0x00008 /* Device Status - RO        */
+#define E1000_TCTL   0x00400 /* Transmit Control - RW     */
+#define E1000_TIPG   0x00410 /* Transmit Control - RW     */
+#define E1000_TDBAL  0x03800 /* TX Base Address Low - RW  */
+#define E1000_TDBAH  0x03804 /* TX Base Address High - RW */
+#define E1000_TDLEN  0x03808 /* TX Length - RW            */
+#define E1000_TDH    0x03810 /* TX Head - RW              */
+#define E1000_TDT    0x03818 /* TX Tail - RW              */
+
+/* Transmit Control */
+#define E1000_TCTL_RST    0x00000001 /* software reset                */
+#define E1000_TCTL_EN     0x00000002 /* enable tx                     */
+#define E1000_TCTL_BCE    0x00000004 /* busy check enable             */
+#define E1000_TCTL_PSP    0x00000008 /* pad short packets             */
+#define E1000_TCTL_CT     0x00000ff0 /* collision threshold           */
+#define E1000_TCTL_COLD   0x003ff000 /* collision distance            */
+#define E1000_TCTL_SWXOFF 0x00400000 /* SW Xoff transmission          */
+#define E1000_TCTL_PBE    0x00800000 /* Packet Burst Enable           */
+#define E1000_TCTL_RTLC   0x01000000 /* Re-transmit on late collision */
+#define E1000_TCTL_NRTU   0x02000000 /* No Re-transmit on underrun    */
+#define E1000_TCTL_MULR   0x10000000 /* Multiple request support      */
+
+#define E1000_TCTL_CT_SHIFT   0x04 /* collision threshold shift */
+#define E1000_TCTL_COLD_SHIFT 0x0c /* collision distance shift  */
+
+/* Transmit Descriptor Status */
+#define E1000_TX_STAT_DD_SHIFT     0x00 /* TX Status DD     */
+#define E1000_TX_STAT_EC_SHIFT     0x01 /* TX Status EC     */
+#define E1000_TX_STAT_LC_SHIFT     0x02 /* TX Status LC     */
+#define E1000_TX_STAT_RSV_RU_SHIFT 0x03 /* TX Status RSV-TU */
+
+#define E1000_TX_STAT_DD		   0x01 /* TX Status DD */
+
+
+/* Transmit Descriptor Command */
+#define E1000_TX_CMD_EOP_SHIFT     0x00 /* TX CMD EOP     */
+#define E1000_TX_CMD_IFCS_SHIFT    0x01 /* TX CMD IFCS    */
+#define E1000_TX_CMD_IC_SHIFT      0x02 /* TX CMD IC      */
+#define E1000_TX_CMD_RS_SHIFT      0x03 /* TX CMD RS      */
+#define E1000_TX_CMD_RSV_RPS_SHIFT 0x04 /* TX CMD RSV_RPC */
+#define E1000_TX_CMD_DEXT_SHIFT    0x05 /* TX CMD DEXT    */
+#define E1000_TX_CMD_VLE_SHIFT     0x06 /* TX CMD VLE     */
+#define E1000_TX_CMD_IDE_SHIFT     0x07 /* TX CMD IDE     */
+
+#define E1000_TX_CMD_RS		       0x08 /* TX CMD  RS       */
+#define E1000_TX_CMD_EOP		   0x01 /* TX CMD  RS       */
+
+/* Transmit Descriptor TIPG */
+# define E1000_TIPG_IPGT_MASK  0x000003FF
+# define E1000_TIPG_IPGR1_MASK 0x000FFC00
+# define E1000_TIPG_IPGR2_MASK 0x3FF00000
+
+/* Receive */
+#define E1000_RAL    0x05400 /* Receive Address Low - RW Array              */
+#define E1000_RAH    0x05404 /* Receive Address High - RW Array             */
+#define E1000_RAH_AV (1<<31) /* Receive Address High Address Valid - RW bit */
+#define E1000_MTA    0x05200 /* Multicast Table Array - RW Array            */
+#define E1000_RDBAL  0x02800 /* RX Descriptor Base Address Low - RW         */
+#define E1000_RDBAH  0x02804 /* RX Descriptor Base Address High - RW        */
+#define E1000_RDLEN  0x02808 /* RX Descriptor Length - RW                   */
+#define E1000_RDH    0x02810 /* RX Descriptor Head - RW                     */
+#define E1000_RDT    0x02818 /* RX Descriptor Tail - RW                     */
+#define E1000_RCTL   0x00100 /* RX Control - RW                             */
+
+
+/* Receive Control */
+#define E1000_RCTL_EN    0x00000002 /* enable                */
+#define E1000_RCTL_LPE   0x00000020 /* long packet enable    */
+#define E1000_RCTL_LBM   0x000000c0 /* loopback mode         */
+#define E1000_RCTL_SZ    0x00030000 /* rx buffer size        */
+#define E1000_RCTL_BSEX  0x02000000 /* Buffer size extension */
+#define E1000_RCTL_SECRC 0x04000000 /* strip ethernet CRC    */
+
+// MO
+#define E1000_RCTL_MO_SHIFT 12         /* multicast offset shift */
+#define E1000_RCTL_MO_0     0x00000000 /* multicast offset 11:0  */
+#define E1000_RCTL_MO_1     0x00001000 /* multicast offset 12:1  */
+#define E1000_RCTL_MO_2     0x00002000 /* multicast offset 13:2  */
+#define E1000_RCTL_MO_3     0x00003000 /* multicast offset 15:4  */
+#define E1000_RCTL_MDR      0x00004000 /* multicast desc ring 0  */
+
+// RDMTS
+#define E1000_RCTL_RDMTS       0x00000300 /* Min Threshold Size         */
+#define E1000_RCTL_RDMTS_HALF  0x00000000 /* rx desc min threshold size */
+#define E1000_RCTL_RDMTS_QUAT  0x00000100 /* rx desc min threshold size */
+#define E1000_RCTL_RDMTS_EIGTH 0x00000200 /* rx desc min threshold size */
+
+// BAM
+#define E1000_RCTL_BAM 0x00008000    /* broadcast enable */
+
+/* these buffer sizes are valid if E1000_RCTL_BSEX is 0 */
+#define E1000_RCTL_SZ_2048 0x00000000 /* rx buffer size 2048 */
+#define E1000_RCTL_SZ_1024 0x00010000 /* rx buffer size 1024 */
+#define E1000_RCTL_SZ_512  0x00020000 /* rx buffer size 512  */
+#define E1000_RCTL_SZ_256  0x00030000 /* rx buffer size 256  */
+
+/* Receive Descriptor STAT */
+#define E1000_RXD_STAT_DD    0x01   /* Descriptor Done         */
+#define E1000_RXD_STAT_EOP   0x02   /* End of Packet           */
+#define E1000_RXD_STAT_IXSM  0x04   /* Ignore checksum         */
+#define E1000_RXD_STAT_VP    0x08   /* IEEE VLAN Packet        */
+#define E1000_RXD_STAT_UDPCS 0x10   /* UDP xsum caculated      */
+#define E1000_RXD_STAT_TCPCS 0x20   /* TCP xsum calculated     */
+#define E1000_RXD_STAT_IPCS  0x40   /* IP xsum calculated      */
+#define E1000_RXD_STAT_PIF   0x80   /* passed in-exact filter  */
+#define E1000_RXD_STAT_IPIDV 0x200  /* IP identification valid */
+#define E1000_RXD_STAT_UDPV  0x400  /* Valid UDP checksum      */
+#define E1000_RXD_STAT_ACK   0x8000 /* ACK Packet indication   */
+
+/* Receive Descriptor ERR */
+#define E1000_RXD_ERR_CE   0x01 /* CRC Error               */
+#define E1000_RXD_ERR_SE   0x02 /* Symbol Error            */
+#define E1000_RXD_ERR_SEQ  0x04 /* Sequence Error          */
+#define E1000_RXD_ERR_CXE  0x10 /* Carrier Extension Error */
+#define E1000_RXD_ERR_TCPE 0x20 /* TCP/UDP Checksum Error  */
+#define E1000_RXD_ERR_IPE  0x40 /* IP Checksum Error       */
+#define E1000_RXD_ERR_RXE  0x80 /* Rx Data Error           */
+
+/* Receive Descriptor SPC */
+#define E1000_RXD_SPC_VLAN_MASK 0x0FFF /* VLAN ID is in lower 12 bits */
+#define E1000_RXD_SPC_PRI_MASK  0xE000 /* Priority is in upper 3 bits */
+#define E1000_RXD_SPC_PRI_SHIFT 13
+#define E1000_RXD_SPC_CFI_MASK  0x1000 /* CFI is bit 12 */
+#define E1000_RXD_SPC_CFI_SHIFT 12
+
+/* Intrrupts */
+#define E1000_IMS 	     0x000D0    /* Interrupt Mask Set - RW      */
+#define E1000_IMC 	     0x000D8    /* Interrupt Mask Clear - WO    */
+#define E1000_IMS_RXDMT0 0x00000010 /* rx desc min. threshold       */
+#define E1000_ICR_RXT0   0x00000080 /* rx timer intr (ring 0)       */
+#define E1000_IMS_RXT0   0x00000080 /* rx timer intr                */
+#define E1000_ICR        0x000C0    /* Interrupt Cause Read - R/clr */
+#define E1000_ICR_RXDMT0 0x00000010 /* rx desc min. threshold (0)   */
+#define E1000_ICR_TXQE   0x00000002 /* Transmit Queue empty         */
+
+// Errors
+#define E1000_ERR_IVALID_ARG     1
+#define E1000_ERR_TX_QUEUE_FULL  2
+#define E1000_ERR_TX_PKT_TOO_BIG 3
+#define E1000_ERR_RX_PKT_TOO_BIG 4
+#define E1000_ERR_RX_QUEUE_EMPTY 5
+
+// Constants
+#define NTDX         64   /* Number of TDESC      */
+#define TDX_BUF_SIZE 2048 /* Tranmist Buffer Size */
+#define NRDX         128  /* Number of RDESC      */
+#define RDX_BUF_SIZE 2048 /* Receive Buffer Size  */
+
+// Structures
+// Transmit Descriptor (TDESC) Layout - Legacy Mode
+struct tx_desc {
+	uint64_t buf_addr;
+	uint16_t len;
+	uint8_t cso;
+	uint8_t cmd;
+	uint8_t status; // [TU-RSV, LC, EC, DD][Reserved]
+	uint8_t css;
+	uint16_t special;
+} __attribute__((packed));
+
+// Receive Descriptor (RDESC) Layout
+struct rx_desc {
+	uint64_t buf_addr;
+	uint16_t len;
+	uint16_t csum;
+	uint8_t status;
+	uint8_t errors;
+	uint16_t special;
+} __attribute__((packed));
+
+// Globals vars
+volatile uint8_t *e1000_base;
+struct tx_desc tx_queue[NTDX] __attribute__((aligned(16)));
+uint8_t tx_bufs[NTDX][TDX_BUF_SIZE];
+struct rx_desc rx_queue[NRDX] __attribute__((aligned(16)));
+uint8_t rx_bufs[NRDX][RDX_BUF_SIZE];
+
+extern int e1000_waiting_counter;
+
+// Function Declartions
+int e1000_attach(struct pci_func *);
+static void transmit_init(void);
+static void receive_init(void);
+int transmit_packet(void *, uint32_t );
+int receive_packet(void *, uint32_t);
+void e1000_interrupt(void);
 #endif	// JOS_KERN_E1000_H
diff --git a/kern/pci.c b/kern/pci.c
index 1b00be5..48e10dd 100644
--- a/kern/pci.c
+++ b/kern/pci.c
@@ -31,6 +31,7 @@ struct pci_driver pci_attach_class[] = {
 // pci_attach_vendor matches the vendor ID and device ID of a PCI device. key1
 // and key2 should be the vendor ID and device ID respectively
 struct pci_driver pci_attach_vendor[] = {
+	{E1000_VEN_ID, E1000_DEV_ID_82540EM, &e1000_attach},
 	{ 0, 0, 0 },
 };
 
diff --git a/kern/syscall.c b/kern/syscall.c
index e749d2b..88017e7 100644
--- a/kern/syscall.c
+++ b/kern/syscall.c
@@ -12,6 +12,7 @@
 #include <kern/console.h>
 #include <kern/sched.h>
 #include <kern/time.h>
+#include <kern/e1000.h>
 
 // Print a string to the system console.
 // The string is exactly 'len' characters long.
@@ -557,7 +558,55 @@ static int
 sys_time_msec(void)
 {
 	// LAB 6: Your code here.
-	panic("sys_time_msec not implemented");
+	return time_msec();
+}
+
+/*
+	Transmit a packet with E1000.
+	return values:
+		-E1000_ERR_IVALID_ARG
+		-E1000_ERR_TX_PKT_TOO_BIG
+		-E1000_ERR_TX_QUEUE_FULL
+		0 (Success)
+*/
+static int
+sys_net_try_send(void *buf, uint32_t buf_len)
+{
+	user_mem_assert(curenv, buf, buf_len, PTE_U);
+	int res = transmit_packet((uint8_t*) buf, buf_len);
+
+	if (res == -E1000_ERR_TX_QUEUE_FULL) {
+		// go sleep
+		curenv->env_tf.tf_regs.reg_eax = -E1000_ERR_RX_QUEUE_EMPTY;
+		curenv->env_status = ENV_NET_WAIT;
+		sched_yield();
+	}
+
+	return res;
+}
+
+/*
+	Recieve a packet with E1000.
+	return values:
+		-E1000_ERR_IVALID_ARG
+		-E1000_ERR_RX_PKT_TOO_BIG
+		-E1000_ERR_RX_QUEUE_FULL
+		0+ = number of bytes read from buffer (Success)
+*/
+static int
+sys_net_try_recv(void *buf, uint32_t buf_len)
+{
+	user_mem_assert(curenv, buf, buf_len, PTE_U);
+	int res = receive_packet(buf, buf_len);
+
+	if (res == -E1000_ERR_RX_QUEUE_EMPTY) {
+		// go sleep
+		curenv->env_tf.tf_regs.reg_eax = -E1000_ERR_RX_QUEUE_EMPTY;
+		curenv->env_status = ENV_NET_WAIT;
+		sched_yield();
+	}
+
+	return res;
 }
 
 // Dispatches to the correct kernel function, passing the arguments.
@@ -628,6 +677,18 @@ syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4,
 			r_val = sys_env_set_trapframe((envid_t) a1, (struct Trapframe*) a2);
 			goto done;
 
+		case SYS_time_msec:
+			r_val = sys_time_msec();
+			goto done;
+
+		case SYS_net_send:
+			r_val = sys_net_try_send((void*) a1, (uint32_t) a2);
+			goto done;
+
+		case SYS_net_try_recv:
+			r_val = sys_net_try_recv((void*) a1, (uint32_t) a2);
+			goto done;
+
 		default:
 			r_val = -E_INVAL;
 	}
diff --git a/kern/trap.c b/kern/trap.c
index 89ec697..34d3a92 100644
--- a/kern/trap.c
+++ b/kern/trap.c
@@ -255,6 +255,8 @@ trap_dispatch(struct Trapframe *tf)
 
 		// clock interrupt
 		case IRQ_OFFSET	+ IRQ_TIMER:
+			if (thiscpu->cpu_id == 0)
+				time_tick();
 			lapic_eoi();
 			sched_yield(); // never returns
 
@@ -268,6 +270,15 @@ trap_dispatch(struct Trapframe *tf)
 			serial_intr();
 			return;
 
+		// e1000 interrupt
+		case IRQ_OFFSET + IRQ_E1000:
+			//cprintf("~~~> kern/trap: Caught IRQ_OFFSET + IRQ_E1000 Intrrupt\n");
+			e1000_interrupt();	
+			lapic_eoi();
+			irq_eoi();
+			return;
+			
+
 		default:
 			goto bad;
 	}
diff --git a/kern/trap.h b/kern/trap.h
index 36b8758..d9d9ff7 100644
--- a/kern/trap.h
+++ b/kern/trap.h
@@ -6,6 +6,7 @@
 # error "This is a JOS kernel header; user programs should not #include it"
 #endif
 
+#include <kern/e1000.h>
 #include <inc/trap.h>
 #include <inc/mmu.h>
 
diff --git a/kern/trapentry.S b/kern/trapentry.S
index 50a3263..5a4b7d5 100644
--- a/kern/trapentry.S
+++ b/kern/trapentry.S
@@ -148,6 +148,9 @@ TRAPHANDLER_NOEC(t_irq_serial, IRQ_OFFSET + IRQ_SERIAL, 0)
 // spurious
 TRAPHANDLER_NOEC(t_irq_spurious, IRQ_OFFSET + IRQ_SPURIOUS, 0)
 
+// E1000
+TRAPHANDLER_NOEC(t_irq_e1000, IRQ_OFFSET + IRQ_E1000, 0)
+
 // ide
 TRAPHANDLER_NOEC(t_irq_ide, IRQ_OFFSET + IRQ_IDE, 0)
 
diff --git a/lib/syscall.c b/lib/syscall.c
index 8a199ce..bf06329 100644
--- a/lib/syscall.c
+++ b/lib/syscall.c
@@ -122,3 +122,15 @@ sys_time_msec(void)
 {
 	return (unsigned int) syscall(SYS_time_msec, 0, 0, 0, 0, 0, 0);
 }
+
+int
+sys_net_try_send(void *buf, uint32_t buf_len)
+{
+	return syscall(SYS_net_send, 0, (uint32_t)buf, (uint32_t)buf_len, 0, 0, 0);
+}
+
+int
+sys_net_try_recv(void *buf, uint32_t buf_len)
+{
+	return syscall(SYS_net_try_recv, 0, (uint32_t)buf, (uint32_t)buf_len, 0, 0, 0);
+}
diff --git a/net/input.c b/net/input.c
index 4e08f0f..bd8f598 100644
--- a/net/input.c
+++ b/net/input.c
@@ -1,7 +1,26 @@
 #include "ns.h"
+#include <inc/lib.h>
+#include <inc/env.h>
+
+#define E1000_ERR_RX_QUEUE_EMPTY 5
+#define BUF_SIZE 2048
 
 extern union Nsipc nsipcbuf;
 
+/*
+	This piece of F*cking Sh*t almost made me cry
+	Who the F*ck would have thought that even with yielding
+	the cpu, sometimes the hint wouldn't have helped.
+	F*ck this - I solve it by addeing 16 pages to work on
+
+	F*ck 
+	F*ck 
+	F*ck 
+	F*ck 
+	F*ck 
+	F*ck 
+*/
+
 void
 input(envid_t ns_envid)
 {
@@ -13,4 +32,54 @@ input(envid_t ns_envid)
 	// Hint: When you IPC a page to the network server, it will be
 	// reading from it for a while, so don't immediately receive
 	// another packet in to the same physical page.
+	char *bufs[16];
+	char *va = (char*)0x0ffff000;
+	int i;
+
+	for (i = 0; i < 16; i++) {
+		sys_page_alloc(0, va, PTE_P | PTE_U | PTE_W);
+		bufs[i] = va;
+		va += PGSIZE;
+	}
+
+	uint8_t buf[BUF_SIZE] = {0};
+	int sys_ret = 0;
+	int current_buffer = 0;
+
+	while (1) {
+		// build req
+		union Nsipc *nsipc = (union Nsipc *) bufs[current_buffer];
+		char *packet_buf = (nsipc->pkt).jp_data;
+		// - read a packet from the device driver
+		//cprintf("net/input: calling syscall net input with :( %d=buf_len %p=buf\n", BUF_SIZE, packet_buf);
+
+		while ((sys_ret = sys_net_try_recv(packet_buf, BUF_SIZE)) == -E1000_ERR_RX_QUEUE_EMPTY) {
+			// noice
+		}
+
+		//cprintf("net/input: returned from syscall net input with :( %d=buf_len %p=buf\n", BUF_SIZE, packet_buf);
+
+
+		assert(sys_ret != -E1000_ERR_RX_QUEUE_EMPTY);
+
+		if (sys_ret < 0)
+			panic("%s: sys_net_try_recv returned %u\n", binaryname, sys_ret);
+
+		(nsipc->pkt).jp_len = sys_ret;
+		ipc_send(ns_envid, NSREQ_INPUT, nsipc, PTE_P | PTE_W | PTE_U);
+		current_buffer = (current_buffer + 1) % 16;
+		sys_yield(); // hint
+		sys_yield(); // hint
+		sys_yield(); // hint
+
+		// send it to the network server - IPC
+		//nsipcbuf.pkt.jp_len = sys_ret;
+		//memcpy(nsipcbuf.pkt.jp_data, buf, sys_ret);
+		//ipc_send(ns_envid, NSREQ_INPUT, &nsipcbuf, PTE_P | PTE_U);
+
+		//sys_yield(); // hint
+		//sys_yield(); // hint
+		//sys_yield(); // hint
+		//memset(buf, 0, sizeof(buf));
+	}
 }
diff --git a/net/output.c b/net/output.c
index f577c4e..2bcaa3e 100644
--- a/net/output.c
+++ b/net/output.c
@@ -1,4 +1,10 @@
 #include "ns.h"
+#include <inc/lib.h>
+
+#define NS_PKT_BUF_SIZE       1536
+#define NS_IVALID_ARG      1
+#define NS_TX_QUEUE_FULL   2
+#define NS_TX_PKT_TOO_BIG  3
 
 extern union Nsipc nsipcbuf;
 
@@ -8,6 +14,20 @@ output(envid_t ns_envid)
 	binaryname = "ns_output";
 
 	// LAB 6: Your code here:
-	// 	- read a packet from the network server
-	//	- send the packet to the device driver
+	while (1) {
+		// 	- read a packet from the network server
+
+		if (ipc_recv(NULL, &nsipcbuf, NULL) != NSREQ_OUTPUT)
+			continue; // ignore none output ipc
+
+		if (nsipcbuf.pkt.jp_len > NS_PKT_BUF_SIZE) {
+			cprintf("%s: output: package size too big\n", binaryname);
+			continue; // ignore it - too big
+		}
+
+		//	- send the packet to the device driver
+		while (sys_net_try_send((void*)nsipcbuf.pkt.jp_data, nsipcbuf.pkt.jp_len) == -NS_TX_QUEUE_FULL) {
+			//sys_yield(); // go sleep - hopefully next time you wake up, the queue will have space.
+		}
+	}
 }
diff --git a/user/httpd.c b/user/httpd.c
index 01ddc3d..070d613 100644
--- a/user/httpd.c
+++ b/user/httpd.c
@@ -77,7 +77,15 @@ static int
 send_data(struct http_request *req, int fd)
 {
 	// LAB 6: Your code here.
-	panic("send_data not implemented");
+	int r;
+	char buf[BUFFSIZE];
+
+	while ((r = read(fd, buf, BUFFSIZE)) > 0) {
+		if (write(req->sock, buf, r) != r)
+			die("send_data: failed to send bytes");
+	}
+
+	return 0;
 }
 
 static int
@@ -216,6 +224,7 @@ send_file(struct http_request *req)
 	int r;
 	off_t file_size = -1;
 	int fd;
+	struct Stat stat;
 
 	// open the requested url for reading
 	// if the file does not exist, send a 404 error using send_error
@@ -223,7 +232,17 @@ send_file(struct http_request *req)
 	// set file_size to the size of the file
 
 	// LAB 6: Your code here.
-	panic("send_file not implemented");
+	fd = open(req->url, O_RDONLY);
+	if (fd < 0)
+		return send_error(req, 404);
+
+	if ((r = fstat(fd, &stat)) < 0)
+		goto end;
+	
+	if (stat.st_isdir) {
+		close(fd);
+		return send_error(req, 404);
+	}
 
 	if ((r = send_header(req, 200)) < 0)
 		goto end;
-- 
1.9.1

