=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.


=== Q What's the purpose of leaving virtual memory region
===   0xeebfe000-0xeebff000 inaccessible?
===   (free form, up to 10 words)

page guard, catch overflows from User Exception Stack.

=== Q Define a page table entry with the following properties:
===   frame starts at 0x1234000. It can be written by the kernel
===   without causing any errors, but has never been written yet. On
===   the other hand, application cannot write to the page, but has
===   recently successfully read from it. All bits which are not
===   responsible for above properties are set to zero.  
===   (a single memory WORD as would be output by gdb's x/1x)

0x1234025

=== Q Consider JOS kernel code:
===     mystery_t x;
===   	char* value = return_a_pointer();
===   	*value = 10;
===   	x = (mystery_t) value;
===   What type mystery_t should refer to?
===   (remove leading "====" from the correct answer line)
uintptr_t
==== physaddr_t


=== Q What information is stored in page directory when mem_init()
===   finishes? For each non-empty PD entry specify:
===    - decimal index (0-1023)
===    - hexadecimal address of virtual memory mapped by this entry
===    - name of kernel data structure which is intended to be
===      accessible through this PDE (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the index in ascending order. If several
===    consequent entries are only differ in address field, you can
===    specify ellipses ("...") instead of an "inner" entries. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    INDEX ADDRESS DATA-STRUCTURE         NAME/DESCRIPTION
===    24    0x12345 "struct Segdesc gdt[]" "Global descriptor table"
===    ...
===    42    0x98765 "struct Segdesc gdt[]" "Global descriptor table"
===    50    0x00011 ""                     "boot loader code"

956    0xf011a000    "struct PageInfo[]"    "pages"
957    0xf011a000    "pde_t*"               "kern_pgdir"
959    0xefff8000    "uint32_t*"            "bootstack"
960    0xf0000000    ""                     "low mem"
...
1023   0xffc00000    ""                     "low mem"

=== Q We have placed the kernel and user environment in the same
===   address space. Why will user programs not be able to read or
===   write the kernel's memory? What specific mechanisms protect the
===   kernel memory?
===   (free form, up to 15 words)

Paging protection, when CPL=3 only entries with PTE_U set are accessible.

=== Q Which virtual addresses are readable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)

0xef000000-0xef404000

=== Q Which virtual addresses are writable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)

NONE

=== Q Assume a hacker can change N bits inside page table (on any
===   level, PD or PT) after it has been set up by the kernel (and
===   before full TLB flush). What is the minimal N to gain full
===   control of the system from hacker's user space process?

1

=== Q What's the maximum amount of physical memory this kernel can
===   support? (number of megabytes, without MB suffix)

2048

=== Q What single constant can be changed in kernel source to make
===   this limit 2 times lower (if kernel normally supports 10MB,
===   we want to make it support only 5MB?

PGSIZE

=== Q What value should this constant be changed to?

512

=== Q Assume the computer has the maximum amount of memory supported
===   by the (unmodified) kernel. What's the overhead of managing this
===   memory in terms of (physical) memory spent?
===   Specify only data structures which size depends on the amount of
===   physical memory and exclude the "fixed" overhead. For example,
===   if data structure size is 123K+0.01*(memory size) and maximum 
===   amount of memory is 100MB, specify 0.01*100MB = 1024KB.
===   For each such data structure specify:
===    - size in KB (without "KB suffix")
===    - name of kernel data structure (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the size in ascending order. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    SIZE  DATA-STRUCTURE         NAME/DESCRIPTION
===    42    "struct Segdesc gdt[]" "Global descriptor table"

2048    "page tables entries"    "page table entires"
4096    "struct PageInfo[]"      "meta data for pages"

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)

1 2

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)

kern/pmap.c
kern/pmap.h
kern/monitor.c
kern/monitor.h

=== Q Describe your solution.
===   (free form, up to 500 words, don't need to use all 500!)

Challenge 1 - Page size
	* Detected if PSE is supported by cpuid.
	* If supported, enable PSE and map only the kern space with 4MB pages.

	Results - qemu info pg

	+---------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------+
	|			NO PSE								|			PSE [KERNBASE, 2^32)						|
	|	VPN range     Entry         Flags        Physical page				|	VPN range     Entry         Flags        Physical page				|
	+---------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------+
	|											|											|
	|	[ef000-ef3ff]  PDE[3bc]     --------WP						|	[ef000-ef3ff]  PDE[3bc]     --------WP						|
	|	  [ef000-ef3ff]  PTE[000-3ff] -------U-P 00116-00515				|	  [ef000-ef3ff]  PTE[000-3ff] -------U-P 00116-00515				|
	|	[ef400-ef7ff]  PDE[3bd]     -------U-P						|	[ef400-ef7ff]  PDE[3bd]     -------U-P						|
	|	  [ef7bc-ef7bc]  PTE[3bc]     --------WP 003ff					|	  [ef7bc-ef7bc]  PTE[3bc]     --------WP 003ff					|
	|	  [ef7bd-ef7bd]  PTE[3bd]     -------U-P 00115					|	  [ef7bd-ef7bd]  PTE[3bd]     -------U-P 00115					|
	|	  [ef7bf-ef7bf]  PTE[3bf]     --------WP 003fe					|	  [ef7bf-ef7bf]  PTE[3bf]     --------WP 003fe					|
	|	  [ef7c0-ef7c0]  PTE[3c0]     ----A---WP 003fd					|	  [ef7c0-ef7c0]  PTE[3c0]     --SDA---WP 00000					|
	|	  [ef7c1-ef7ff]  PTE[3c1-3ff] --------WP 003fc 003fb 003fa 003f9 003f8 003f7 .. |	  [ef7c1-ef7ff]  PTE[3c1-3ff] --S-----WP 00400 00800 00c00 01000 01400 01800 ..	|
	|	[efc00-effff]  PDE[3bf]     --------WP						|	[efc00-effff]  PDE[3bf]     --------WP						|
	|	  [efff8-effff]  PTE[3f8-3ff] --------WP 0010a-00111				|	  [efff8-effff]  PTE[3f8-3ff] --------WP 0010a-00111				|
	|	[f0000-f03ff]  PDE[3c0]     ----A---WP						|	[f0000-f03ff]  PDE[3c0]     --SDA---WP 00000-003ff				|
	|	  [f0000-f00b7]  PTE[000-0b7] --------WP 00000-000b7				|	[f0400-fffff]  PDE[3c1-3ff] --S-----WP 00400-0ffff				|
	|	  [f00b8-f00b8]  PTE[0b8]     ---DA---WP 000b8					|											|
	|	  [f00b9-f00ff]  PTE[0b9-0ff] --------WP 000b9-000ff				|											|
	|	  [f0100-f0102]  PTE[100-102] ----A---WP 00100-00102				|											|
	|	  [f0103-f0110]  PTE[103-110] --------WP 00103-00110				|											|
	|	  [f0111-f0111]  PTE[111]     ---DA---WP 00111					|											|
	|	  [f0112-f0113]  PTE[112-113] --------WP 00112-00113				|											|
	|	  [f0114-f0114]  PTE[114]     ---DA---WP 00114					|											|
	|	  [f0115-f03ff]  PTE[115-3ff] --------WP 00115-003ff				|											|
	|	[f0400-fffff]  PDE[3c1-3ff] --------WP						|											|
	|	  [f0400-fffff]  PTE[000-3ff] --------WP 00400-0ffff				|											|
	|											|											|
	+---------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------+

	* An additional change we had to do:
	* Removed the check_* functions, because they expect 4KB paging results.
	* And we reordered the free_page_list, so the low address pages are first
	* in the list. It ensures that we dont use >= 4MB address before the new
	* paging directory is used.
	*
	* Note: Don't know why it was done initially in a check_* function, but we
	* learned about it when debugging.
	*
	* To run it use: -DUSE_PSE

Challenge 2 - Extend JOS monitor with commands to:
	(1) Display useful info on mappings

		Example:

		K> showmappings 0xf0000000 0xf0005000
		VA            PA       FLAGS
		0xf0000000 -> 0x00000000 ---WP
		0xf0001000 -> 0x00001000 DA-WP
		0xf0002000 -> 0x00002000 DA-WP
		0xf0003000 -> 0x00003000 DA-WP
		0xf0004000 -> 0x00004000 DA-WP
		0xf0005000 -> 0x00005000 DA-WP

	(2) Explicitly set/clear/change the permissions of any mapping in
		the current address space

		Example:

		K> permmap 0xf0000000 +DAU
		Updated PTE at VA 0xf0000000: PTE = 0x00000000 DAUWP

	(3) Dump the contects of a range of memory - virtual/physical

		Example:

		K> dumpmem -v 0xf010000c 0xf010001c
		0xf010000c: 66 c7 05 72 04 00 00 34 12 b8 00 70 11 00 0f 22
		K> dumpmem -p 0x10000c 0x10001c
		0xf010000c: 66 c7 05 72 04 00 00 34 12 b8 00 70 11 00 0f 22

	* Implementations were mainly using pgdir_walk.
	* For memdump -p, we added a function in kern/pmap.c that scans the table
	* for a va that mapps to the wanted pa.

Challenge 3 - Outline: Design allowing users full 4GB address space:
	* Shared Trampoline:
	*	A small block (page) of memory which both the user and the kernel
	*	have mapping to. It will be incharge of the mode transitions between
	*	the user and kernel.
	*
	*	The trampoline is mapped at a fixed virtual address (e.g. 0xFFFFF000)
	*	in both pages tables (user/kernel) and marked as RO and executable.
	*
	*	User -> Kernel
	*		When a syscall/interrupt occurs, bounce to the trampoline.
	*		Execute the trampoline's code, saving the users process state
	*		and switch the page table to the kernels page table, then jump
	*		to kernel space (interrupt handler).
	*
	*	Kernel -> User
	*		When the kernel is done, bounce back to the trampoline.
	*		Switch back the page table, restore the user process state
	*		and return to user mode.
	*
	*	Kernel accesss to physical memory & IO devices
	*		The kernel has a private page table, where it can freely map
	*		all of the physical memory, kernel and I/O. It does not include
	*		any user mapping by default, improving isolation.
	*
	*	Kernel access user enviroment's virtual address space
	*		"Bounce buffer":
	*		The kernel identifices what user-space pages he needs.
	*		Sets up temporary PTE's that map to those physical pages.
	*		Then has access to user data.
	*		These mapping must be removed after use to avoid stail pointers
	*		leakes etc.
	*
	*	Disadvantages
	*		(1) Performace overhead:
	*			When switching modes the TLB is invalid and a new table needs
	*			read. Also, when kernel wants to access User enviroment, he needs
	*			to do more memory work (described above).
	*
	*		(2) More compilcated memory managment.
	*
	*	Advantages
	*		(1) flexibility - Maximized User address space:
	*			Allowing the user to access the entire 4GB virtual address space.
	*
	*		(2) Security - Improved kernel isolation:
	*			By not being mapped from user space at all we avoide accidental
	*			leaks.
