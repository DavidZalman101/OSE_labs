From 1d6dcb34065775248ad00fb017985a41336e14a6 Mon Sep 17 00:00:00 2001
From: DavidZalman101 <davidzalman.101@gmail.com>
Date: Wed, 25 Jun 2025 13:22:56 +0300
Subject: [PATCH 04/12] lab6 - Exercise 4.

---
 kern/e1000.c | 14 ++++++++++++++
 kern/e1000.h | 16 ++++++++++++++++
 2 files changed, 30 insertions(+)

diff --git a/kern/e1000.c b/kern/e1000.c
index 476bdbf..f4afc02 100644
--- a/kern/e1000.c
+++ b/kern/e1000.c
@@ -1,4 +1,5 @@
 #include <kern/e1000.h>
+#include <kern/pmap.h>
 
 // LAB 6: Your driver code here
 
@@ -10,6 +11,19 @@
 int
 e1000_attach(struct pci_func *pcif)
 {
+	physaddr_t bar0_base;
+	uint32_t bar0_size;
+	// pci_func_enable negotiates an MMIO region with the E1000 and stores its base
+	// and size in BAR 0. This is a range of physical memory addresses assigned to
+	// this device.
 	pci_func_enable(pcif);
+
+	// Create a virtual memory mapping for the E1000 BAR 0.
+	bar0_base = pcif->reg_base[0];
+	bar0_size = pcif->reg_size[0];
+	e1000_base = mmio_map_region(bar0_base, bar0_size);
+
+	// test - print the device status register - expecting 0x80080783
+	cprintf("E1000 status = [%x]\n", E1000_REG(E1000_STATUS));
 	return 0;
 }
diff --git a/kern/e1000.h b/kern/e1000.h
index 0e47444..1de05a6 100644
--- a/kern/e1000.h
+++ b/kern/e1000.h
@@ -8,7 +8,23 @@
 #define E1000_VEN_ID 0x8086
 #define E1000_DEV_ID_82540EM 0x100E
 
+/*	Register Set.
+
+	Registers are defined to be 32 bits and should be accessed as 32 bit values.
+	There register are physically located on the NIC, but are mapped into the host
+	memory address sapce.
+
+	RW - register is both readable and writable.
+	RO - register is read only.
+	WO - register is write only.
+	R/clr - register is read only and is cleared when read.
+	A - register array.
+*/
+#define E1000_REG(offset) (*(volatile uint32_t*)(e1000_base + offset)) /* Read Register at offset */
+#define E1000_STATUS   0x00008  /* Device Status - RO */
+
 
 int e1000_attach(struct pci_func *);
+volatile uint8_t *e1000_base;
 
 #endif	// JOS_KERN_E1000_H
-- 
1.9.1

