=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q In Exercise 4, can the function 'trap' ever return?
===   (yes/no)

no

=== Q What is the purpose of having an individual handler function for
===   each exception/interrupt? (i.e., if all exceptions/interrupts
===   were delivered to the same handler, what feature that exists in
===   the current implementation could not be provided?)
===   (free form, 1 sentence)

The kernel wouldn't be able to know the trap number, and won't know how to handle it.

=== Q Did you have to do anything to make the user/softint program
===   behave correctly?
===   (yes/no)

no

=== Q The grade script expects it to produce a general protection
===   fault (trap 13), but softint's code says int $14. Why should
===   this produce interrupt vector 13? 
===   (free form, 1 sentence)

14 ,page fault, requires CPL=0, invoking it as a user results access violation, hence its expected to produce interrupt 13, general protection fault.

=== Q What happens if the kernel actually allows softint's int $14
===   instruction to invoke the kernel's page fault handler (which is
===   interrupt vector 14)?
===   (free form, 1 sentence)

Allows a user to exploit the kernel page fault handler, which might result in security vulnerabilities.

=== Q The break point test case will either generate a break point
===   exception or a general protection fault depending on how you
===   initialized the break point entry in the IDT (i.e., your call to
===   SETGATE from idt_init). Why? How did you need to set it in
===   order to  get the breakpoint exception to work as specified
===   above and what incorrect setup would cause it to trigger a
===   general protection fault?
===   (free form)

The test could result in a general protection fault if the IDT entry
for the breakpoint was initilized with DPL=0, which pervents user
programs from invoking it. We set up the breakpoint handler with DPL=3
to allow user-level int3 instructions to correctly trigger a breakpoint
exception.

=== Q What do you think is the point of these mechanisms, particularly
===   in light of what the user/softint test program does? 
===   (free form, 1 sentence)

The mechanisms ensure that user programs cannot misuse privileged exceptions
enforcing separation between user and kernel mode for security and stability.

=== Q In Exercise 9, what causes the page fault which panics the
===   kernel when running user/breakpoint?
===   (free form, 1 sentence)

The kernel's backtrace function allows the user stack up to ebp=USTACKTOP
but only the page at USTACKTOP - PGSIZE is mapped, Attempting to read above
causes a non-present page fault in kernel moade, leading to a panic.

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)

1 2

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)

kern/trapentry.S
kern/trap.c
kern/monitor.c
kern/monitor.h

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)

Challenge 1 - Clean up
	* Simple assembly magic:
	*
	* Extending the MACROS in trapentry.S to allocate data for each
	* entry (struct { trapno, trapfunc, perm}).
	* Resulting an array of struct TrapEntry, which is iterated
	* in trap.c, instead of declaring all the traps once more.

Challenge 2 - continue, single step (int3)
	* trap_dispatch directs T_DEBUG and T_BRKPT to the monitor
	* mon_continue makes sure that the FL_TF flag in the eflags is off.
	* moc_step makes sure to turn on the FL_TF flag.
	*
	* In order to continue, all the kernel needs to do, is return from the monitor
	* back to trap_dispatch, which will return to where the interupt happened.
	*
	* In order to step, the monitor must turn on the TF flag in the trap frame
	* so the CPU will do the following when back in user space:
	*    execute 1 instruction
	*    interrupt for DEBUG.
	*
	* Note: the mon_continue turns off the TF to let go of the single step.
