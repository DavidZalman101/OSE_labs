From aa7ed67db2d55e7889c45c28441914a89284424d Mon Sep 17 00:00:00 2001
From: DavidZalman101 <davidzalman.101@gmail.com>
Date: Fri, 27 Jun 2025 15:15:48 +0300
Subject: [PATCH 08/12] lab6 - Exercise 8.

---
 kern/e1000.c |  4 ++--
 net/output.c | 23 +++++++++++++++++++++--
 2 files changed, 23 insertions(+), 4 deletions(-)

diff --git a/kern/e1000.c b/kern/e1000.c
index 175225d..9c05b69 100644
--- a/kern/e1000.c
+++ b/kern/e1000.c
@@ -29,8 +29,8 @@ e1000_attach(struct pci_func *pcif)
 	transmit_init();
 
 	// test - Transmit Packet
-	char *hello_str_packet = "hello";
-	transmit_packet((uint8_t*)hello_str_packet, 6);
+	//char *hello_str_packet = "hello";
+	//transmit_packet((uint8_t*)hello_str_packet, 6);
 
 	return 0;
 }
diff --git a/net/output.c b/net/output.c
index f577c4e..a308f47 100644
--- a/net/output.c
+++ b/net/output.c
@@ -1,4 +1,10 @@
 #include "ns.h"
+#include <inc/lib.h>
+
+#define NS_PKT_BUF_SIZE       1536
+#define NS_IVALID_ARG      1
+#define NS_TX_QUEUE_FULL   2
+#define NS_TX_PKT_TOO_BIG  3
 
 extern union Nsipc nsipcbuf;
 
@@ -8,6 +14,19 @@ output(envid_t ns_envid)
 	binaryname = "ns_output";
 
 	// LAB 6: Your code here:
-	// 	- read a packet from the network server
-	//	- send the packet to the device driver
+	while (1) {
+		// 	- read a packet from the network server
+
+		if (ipc_recv(NULL, &nsipcbuf, NULL) != NSREQ_OUTPUT)
+			continue; // ignore none output ipc
+
+		if (nsipcbuf.pkt.jp_len > NS_PKT_BUF_SIZE) {
+			cprintf("%s: output: package size too big\n", binaryname);
+			continue; // ignore it - too big
+		}
+
+		//	- send the packet to the device driver
+		while (sys_net_try_send((void*)nsipcbuf.pkt.jp_data, nsipcbuf.pkt.jp_len) == -NS_TX_QUEUE_FULL)
+			sys_yield(); // go sleep - hopefully next time you wake up, the queue will have space.
+	}
 }
-- 
1.9.1

